generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model carts {
  id         Int      @id @default(autoincrement())
  count      Int
  selected   Boolean  @default(false)
  product_id String
  user_email String
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users    @relation(fields: [user_email], references: [email], onDelete: Cascade, onUpdate: NoAction)
}

model orders {
  id         Int       @id @default(autoincrement())
  placed     DateTime? @default(now()) @db.Timestamptz(6)
  total      Int
  status     String    @default("placed") @db.VarChar
  user_email String    @db.VarChar
  products   Json?
  users      users     @relation(fields: [user_email], references: [email], onDelete: Cascade, onUpdate: NoAction)
}

model product_details {
  id            Int      @id @default(autoincrement())
  imageurls     String[]
  title         String
  originalprice Int
  details       Json?
  product_id    String
  products      products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model products {
  id              String                   @id @db.VarChar
  name            String                   @db.VarChar
  description     String
  price           Int
  ts              Unsupported("tsvector")? @default(dbgenerated("(setweight(to_tsvector('english'::regconfig, (COALESCE(name, ''::character varying))::text), 'A'::\"char\") || setweight(to_tsvector('english'::regconfig, COALESCE(description, ''::text)), 'B'::\"char\"))"))
  carts           carts[]
  product_details product_details[]
  reviews         reviews[]
}

model reviews {
  id         Int       @id @default(autoincrement())
  product_id String?   @db.VarChar
  user_email String    @db.VarChar
  rating     Int
  time       DateTime? @default(now()) @db.Timestamptz(6)
  comment    String?
  products   products? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users     @relation(fields: [user_email], references: [email], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  email       String    @id @db.VarChar
  first_name  String    @db.VarChar
  last_name   String    @db.VarChar
  password    String    @db.VarChar
  profile_img String    @default("https://cdn-icons-png.flaticon.com/512/1053/1053244.png") @db.VarChar
  carts       carts[]
  orders      orders[]
  reviews     reviews[]
}
